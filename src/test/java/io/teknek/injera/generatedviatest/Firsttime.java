/* !!Generated by the injera compiler!! 
 !!You should not touch this!! */
package io.teknek.injera.generatedviatest;
import java.nio.ByteBuffer;
public class Firsttime {
  private static final int ONE_BYTE_SIZE = -1;
  private static final int TWO_BYTE_SIZE = -2;
  private static enum Field {
    afield(1,4),
    bfield(2,ONE_BYTE_SIZE),
    ;
    Field(int tag, int size){
      this.tag = tag;
      this.size = size;
    }
    int tag;
    int size;
  }
  private static final Field [] fields = new Field[] { null, null, Field.afield,Field.bfield,};
  private Field findFieldForTag(int tag){
    return fields[tag];
  }
  private final ByteBuffer injDataBuffer;
  private int maxPosition = 0;
  public Firsttime(){
     injDataBuffer = ByteBuffer.allocate(100);
  }
  public Firsttime(ByteBuffer buffer){
     injDataBuffer = buffer;
  }
  private int locateForRead(Field searchField){
    if (maxPosition == 0){
      return -1;
    }
    int i = 0;
    while (i < maxPosition){
      int index = injDataBuffer.get(i) & 0xFF;
      if (index == 0){ 
        return -1;
      }
      if (index == searchField.tag){
        return i;
      }
      if (index > searchField.tag){
        return -1;
      }
      Field f = findFieldForTag(index);
      if (f.size == ONE_BYTE_SIZE){
        int size = injDataBuffer.get(i + 1) & 0xFF ;
        i += size + 1 + 1;
      } else if (f.size == TWO_BYTE_SIZE){
        i += injDataBuffer.getInt(i + 1) + 1 + 4;
      } else {
        i += f.size + 1;
      }
    }
    throw new IllegalArgumentException("We done fed up");
  }
}